openapi: 3.0.3
info:
  title: NeosVR API
  description: API Documentation for NeosVR
  version: '2.0'
  contact:
    name: Contribute to the Docs
    url: https://github.com/PolyLogiX-Studio/NeosVR-API/
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://api.neos.com
components:
  securitySchemes:
    neosAuth:
      type: apiKey
      name: Authorization
      in: header
      description: >
        Neos Authentication Token<br>**Format:** `"Authorization": "neos
        UserID:SessionToken"`
  parameters:
    UserID:
      name: UserId
      in: path
      required: true
      description: ID of the User
      schema:
        type: string
        example: U-bombitmanbomb
        pattern: ^U-.+$
  schemas:
    OnlineStatus:
      type: string
      enum:
        - Offline
        - Invisible
        - Away
        - Busy
        - Online
    SessionAccessLevel:
      type: string
      enum:
        - Private
        - LAN
        - Friends
        - FriendsOfFriends
        - RegisteredUsers
        - Anyone
    OutputDevice:
      type: string
      enum:
        - Unknown
        - Headless
        - Screen
        - VR
        - Camera
    RecordId:
      type: object
      properties:
        recordId:
          type: string
          pattern: >-
            ^R-[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$
          example: R-6b26b0e4-95b0-4ff9-bc24-5efd791e8b4c
        ownerId:
          type: string
          pattern: ^U-.+$
          example: U-h33t
      required:
        - recordId
        - ownerId
    SessionUser:
      type: object
      properties:
        username:
          type: string
          example: bombitmanbomb
        userID:
          type: string
          example: U-bombitmanbomb
        isPresent:
          type: boolean
        outputDevice:
          $ref: '#/components/schemas/OutputDevice'
    SessionInfo:
      type: object
      properties:
        name:
          type: string
          example: Beach Bum's Paradice! (With A MacDonalds)
        description:
          type: string
          example: null
        correspondingWorldId:
          $ref: '#/components/schemas/RecordId'
        tags:
          type: array
          items:
            type: string
            example: world
        sessionId:
          type: string
          example: S-f4981eeb-67ce-43e6-83bc-272010d51ae4
        normalizedSessionId:
          type: string
          example: s-f4981eeb-67ce-43e6-83bc-272010d51ae4
          readOnly: true
        hostUserId:
          type: string
          example: U-bombitmanbomb
        hostMachineId:
          type: string
        hostUsername:
          type: string
          example: bombitmanbomb
        compatibilityHash:
          type: string
          example: VRk5owzoWaGQFaNQbKGUJw==
        universeId:
          type: string
        neosVersion:
          type: string
          example: 2021.10.11.1175
        headlessHost:
          type: boolean
        sessionURLs:
          type: array
          items:
            type: string
            example: lnl-nat:///S-f4981eeb-67ce-43e6-83bc-272010d51ae4
        parentSessionIds:
          type: array
          items:
            type: string
        nestedSessionIds:
          type: array
          items:
            type: string
        sessionUsers:
          type: array
          items:
            $ref: '#/components/schemas/SessionUser'
        thumbnail:
          type: string
          example: >-
            https://operationaldata.neos.com/thumbnails/03b4223f-0b73-4f04-b95a-f6a9c93efea7-v2.webp
        joinedUsers:
          type: integer
          format: int32
        activeUsers:
          type: integer
          format: int32
        totalJoinedUsers:
          type: integer
          format: int32
        totalActiveUsers:
          type: integer
          format: int32
        maxUsers:
          type: integer
          format: int32
        mobileFriendly:
          type: boolean
        sessionBeginTime:
          type: string
          format: date-time
        lastUpdate:
          type: string
          format: date-time
        awaySince:
          type: string
          format: date-time
        accessLevel:
          $ref: '#/components/schemas/SessionAccessLevel'
    UserStatus:
      type: object
      properties:
        onlineStatus:
          $ref: '#/components/schemas/OnlineStatus'
        lastStatusChange:
          type: string
          format: date-time
        currentSessionId:
          type: string
          example: S-f4981eeb-67ce-43e6-83bc-272010d51ae4
        currentSessionAccessLevel:
          $ref: '#/components/schemas/SessionAccessLevel'
        currentSessionHidden:
          type: boolean
        currentHosting:
          type: boolean
        compatibilityHash:
          type: string
          example: VRk5owzoWaGQFaNQbKGUJw==
        neosVersion:
          type: string
          example: 2021.10.11.1175
        publicRSAKey:
          type: string
        outputDevice:
          $ref: '#/components/schemas/OutputDevice'
        isMobile:
          type: boolean
        activeSessions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SessionInfo'
    UsernameLoginCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        totp:
          type: string
          description: Two Factor Authentication
        secretMachineId:
          type: string
          description: On Null will log out any other sessions
        rememberMe:
          type: boolean
          default: false
      required:
        - username
        - password
    UserIDLoginCredentials:
      type: object
      properties:
        ownerId:
          type: string
          format: UserID
          pattern: ^U-.+$
          description: User ID
        password:
          type: string
          format: password
        totp:
          type: string
          description: Two Factor Authentication
        secretMachineId:
          type: string
          description: On Null will log out any other sessions
        rememberMe:
          type: boolean
          default: false
      required:
        - ownerId
        - password
    EmailLoginCredentials:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        totp:
          type: string
          description: Two Factor Authentication
        secretMachineId:
          type: string
          description: On Null will log out any other sessions
        rememberMe:
          type: boolean
          default: false
      required:
        - email
        - password
    PasswordChangeCredentials:
      type: object
      properties:
        password:
          type: string
          format: password
        recoverCode:
          type: string
          description: >
            Recovery Code received from [Reset Password](#tag/User-Status)<br>
            Used with __password__ to set a new account password.
          example: M0OIUzkS02KBUh==
    UserSession:
      type: object
      properties:
        userId:
          type: string
          example: U-bombitmanbomb
        token:
          type: string
        created:
          type: string
          format: date-time
        expire:
          type: string
          format: date-time
        secretMachineId:
          type: string
        rememberMe:
          type: boolean
  responses:
    '403':
      description: Forbidden
    '404':
      description: Not Found
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              type:
                type: string
              title:
                type: string
                example: Not Found
              status:
                type: integer
                example: 404
              traceId:
                type: string
security:
  - neosAuth: []
paths:
  /api/users/{UserId}/status:
    summary: User Status Endpoint
    get:
      summary: Get User Status
      description: DESCRIPTION
      security: []
      operationId: getUserStatus
      tags:
        - User Status
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatus'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Update a user status
      security:
        - neosAuth:
            - updateStatus
      operationId: updateUserStatus
      tags:
        - User Status
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: OK
        '403':
          $ref: '#/components/responses/403'
  /api/userSessions:
    summary: User Session Endpoint
    post:
      summary: Manage User Session
      description: >
        This endpoint does not follow proper **REST**ful design and handles
        several operations.<br> <ul>
          <li>Login</li>
          <li>Password Reset</li>
          <li>2FA (TOTP)</li>
        </ul>
      security:
        - neosAuth:
            - passwordReset
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UsernameLoginCredentials'
                - $ref: '#/components/schemas/UserIDLoginCredentials'
                - $ref: '#/components/schemas/EmailLoginCredentials'
                - $ref: '#/components/schemas/PasswordChangeCredentials'
            examples:
              Login With Username:
                value:
                  username: bombitmanbomb
              Login With Email:
                value:
                  username: bombitmanbomb
              Login With UserID:
                value:
                  ownerId: U-bombitmanbomb
              Change Password:
                value:
                  recoverCode: M0OIUzkS02KBUh==
                  password: Totally Legit Password
      tags:
        - Login
        - Password Reset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
        '400':
          description: Invalid Credentials
          content:
            text/plain:
              schema:
                type: string
                example: Invalid Credentials
