openapi: 3.1.0
info:
  title: NeosVR API
  description: |
    Documentation for NeosVR's API

    --------
    >
    > This is an **UNOFFICIAL** Community Run resource to help fellow developers interact with the NeosVR Api.
    >
    > If you find this resource helpful consider [Supporting us on Patreon](https://www.patreon.com/PolyLogiX_VR) to help with Hosting this Service and our other open source projects!
    >
    > build `2021.10.26.9`
    >
    --------

    # OpenAPI Specification
    This API is documented in **OpenAPI format**.

    # Cross-Origin Resource Sharing
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).

    # Rate Limiting

    *Most* endpoints are Rate Limited. Exceeding rate limits will result in a `429 - Too Many Requests` response code.

    Too many requests in the same second (Burst Requests) to the same endpoint will also return `429 - Too Many Requests`. This has a Hard Limit on __all__ endpoints.

    All rated endpoints have the following headers to denote various info about it's limits:

    | Header | Type | Example | Description |
    | ------ | ------ | ------ | ------ |
    | X-Rate-Limit-Limit | `String` | 1m | How long the Rate limit lasts using Windows **Date format codes**. |
    | X-Rate-Limit-Remaining | `Integer` | 10 | Amount of calls remaining before the server starts responding with code `429`. |
    | X-Rate-Limit-Reset | `String <Date-Time>` | 2021-10-26T04:01:32.0523331Z | DateTime when `X-Rate-Limit-Remaining` Resets. |

    If the quota is Exceeded or multiple commands are sent within a second `429 - Too Many Requests` will be received with info on when you can attempt to call the api again.

    | Header | Type | Example | Description |
    | ------ | ------ | ------ | ------ |
    | Retry-After | `Integer` | 16 | Indicates how many seconds to wait before making a follow-up request |

  version: '2.0'
  contact:
    name: Support and Contributing
    url: 'https://github.com/PolyLogiX-Studio/NeosVR-API/'
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: 'https://api.neos.com'
    description: CloudX Api
  - url: 'https://auth.neos.com'
    description: CloudX OAuth Api
components:
  securitySchemes:
    neosAuth:
      $ref: ./components/securitySchemes/neosAuth.yaml
    neosOAuth:
      $ref: ./components/securitySchemes/neosOAuth.yaml
security:
  - neosAuth: []
tags:
  - name: Login
    description: |
      Most endpoints require [Authentication](#section/Authentication) to access data. Thankfully logging in is fairly straightforward.
  - name: Logout
    description: Delete a Session Token
  - name: User Status
    description: Operations on the User Session
  - name: Password Reset
    description: Operations on the User Session
  - name: OAuth
    description: OAuth Endpoints
  - name: API Libraries
    description: API Libraries created by the Community
  - name: Neos.js
    $ref: './components/resources/libraries/NeosJS.yaml'
  - name: CloudX.js
    $ref: './components/resources/libraries/CloudX.js.yaml'
  - name: CloudX.Shared.dll
    $ref: './components/resources/libraries/CloudX.Shared.yaml'
x-tagGroups:
  - name: User Session
    tags:
      - Register
      - Login
      - Logout
      - User Status
      - Password Reset
  - name: Users
    tags:
      - User Search
  - name: Groups
    tags:
      - Group
      - Member
      - Membership
  - name: Records
    tags:
      - Records
  - name: Cloud Variables
    tags:
      - noop
  - name: Extra
    tags:
      - Utility
      - OAuth
  - name: API Libraries
    tags:
      - API Libraries
      - Neos.js
      - CloudX.js
      - CloudX.Shared.dll
paths:
  '/api/users':
    $ref: 'paths/api@users.yaml'
  '/api/users/requestlostpassword':
    $ref: 'paths/api@users@requestlostpassword.yaml'
  '/api/users/{UserId}/status':
    $ref: 'paths/api@users@{UserId}@status.yaml'
  '/api/userSessions':
    $ref: 'paths/api@userSessions.yaml'
  '/api/userSessions/{UserId}/{SessionToken}':
    $ref: 'paths/api@userSessions@{UserId}@{SessionToken}.yaml'
  '/api/groups':
    $ref: 'paths/api@groups.yaml'
  '/api/groups/{GroupId}':
    $ref: 'paths/api@groups@{GroupId}.yaml'
  '/api/groups/{GroupId}/members':
    $ref: 'paths/api@groups@{GroupId}@members.yaml'
  '/api/groups/{GroupId}/members/{UserId}':
    $ref: 'paths/api@groups@{GroupId}@members@{UserId}.yaml'
  '/api/users@{Identifier}':
    $ref: 'paths/api@users@{Identifier}.yaml'
  '/install/Pro/Public':
    $ref: 'paths/api@Pro@Public.yaml'
  '/api/{OwnerType}/{OwnerId}/records/{RecordId}':
    $ref: 'paths/api@{OwnerType}@{OwnerId}@records@{RecordId}.yaml'
  '/api/{OwnerType}/{OwnerId}/records/root/{path}':
    $ref: 'paths/api@{OwnerType}@{OwnerId}@records@root@{path}.yaml'
  '/api/user/profile':
    $ref: 'paths/api@user@profile.yaml'
